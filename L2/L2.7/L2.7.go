package main

//импортируем нужные библиотеки
import (
	"fmt"
	"math/rand"
	"time"
)

// функция asChan принимает произвольное количество чисел и возвращает кана
func asChan(vs ...int) <-chan int {
	//создаем небуферезированный канал
	c := make(chan int)
	//запускаем горутину - производителя
	go func() {
		for _, v := range vs {
			//отправляем число в канал
			c <- v
			//имитируем задержку от 0 до 1000мс
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
		//когда отправили и прочитали все числа из канала, закрываем его
		close(c)
	}()
	//возвращаем канал для чтения
	return c
}

// функция объединения каналов
func merge(a, b <-chan int) <-chan int {
	//создаем канал, который будет объединенным
	c := make(chan int)
	//запускаем горутину - слушатель
	go func() {
		for {
			select {
			//если пришло значение из канала a, передаем его в канал c
			case v, ok := <-a:
				//если успешно прочитали значение, передаем в канал c
				if ok {
					c <- v
					//если канал закрыт, зануляем канал, чтобы выйти из select
				} else {
					a = nil
				}
			//если пришло значение из канала b, передаем его в канал c, далее аналогично
			case v, ok := <-b:
				if ok {
					c <- v
				} else {
					b = nil
				}
			}
			//если канал а и канал b закрыты, тогда закрываем канал c(объединенный)
			if a == nil && b == nil {
				//закрываем канал
				close(c)
				return
			}
		}
	}()
	//возвращаем объединенный канал
	return c
}

func main() {
	//инициализируем генератор случайных чисел(делаем так, чтобы seed всегда генерировался разный)
	rand.Seed(time.Now().Unix())
	//создаем два потока(канала) чисел
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)

	//объединяем их в один канал
	c := merge(a, b)
	//читаем данные из канала c(объединенного) и печатаем их
	for v := range c {
		fmt.Print(v)
	}
}
