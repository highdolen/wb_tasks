package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"strings"
	"unicode"
)

var (
	fields    = flag.String("f", "", "Номера колонок, которые нужно вывести")
	delimiter = flag.String("d", "", "Использовать другой разделитель(символ)")
	separated = flag.Bool("s", false, "Вывод строк только с разделителями")
)

func toInt(s string) int {
	n := 0
	//проходимся по строке(может быть многозначное число, поэтому делаем цикл)
	for _, r := range s {
		//если руна число(проверка на всякий случай), тогда переводим ее в число
		if unicode.IsDigit(r) {
			//поразрядный перевод руны в число
			n = n*10 + int(r-'0')
		}
	}
	//возвращаем число
	return n
}

// selectCollumns принимает на вход строку и возвращает срез нужных индексов
func selectCollumns(nums string) []int {
	//срез для хранения индексов
	numColumns := []int{}
	//делим входную строку(с флагом) на части(по запятой)
	parts := strings.Split(nums, ",")

	//проходимся по числам(пока что в строковом представлении)
	for _, part := range parts {
		//удаляем лишние пробелы
		part = strings.TrimSpace(part)
		//если строка содержит "-", значит выделяем границы
		if strings.Contains(part, "-") {
			//делим на нижнюю и верхнюю границу
			bounds := strings.Split(part, "-")
			//если вдруг длина не равна 2, значит был неправильный ввод(просто игнорируем эту часть ввода)
			if len(bounds) != 2 {
				continue
			}
			//обозначаем нижнюю границу и переводим строку в число
			start := toInt(bounds[0])
			//обозначаем верхнюю границу и переводим строку в число
			end := toInt(bounds[1])
			//если начальное и конечное число больше 0, тогда добавляем в слайс все числа в промежутке между числами
			if start > 0 && end > 0 {
				//елси пользователь вдруг ввел последовательность чисел в неправильном порядке, тогда переставляем эти числа
				if start > end {
					start, end = end, start
				}
				//запускаем цикл для перебора и добавления чисел в слайс
				for n := start; n <= end; n++ {
					numColumns = append(numColumns, n)
				}
			}
			//если же часть не содержала символ "-", значит часть состоит из одного числа и мы просто добавляем его в наш слайс
		} else {
			numColumns = append(numColumns, toInt(part))
		}
	}

	//возвращаем слайс
	return numColumns
}

// Collumns принимает на вход срез строк и выводит данные в зависимости от указанных флагов
func Collumns(lines []string) {
	//проходимся по входным строкам циклом
	for _, line := range lines {
		//создаем срез, где будут храниться строки, разделенные разделителем
		str := []string{}
		//если флаг -d не был введен при запуске, значит делим строки по \t(по дефолту)
		if *delimiter == "" {
			str = strings.Split(line, "\t")
			//если был флаг -d, значит разделитель будет в соотвествии с указанным
		} else {
			str = strings.Split(line, *delimiter)
		}

		//если пришел флаг -s и длина строки после разделения остается равной 1, тогда "игнорируем"
		//эту строку и переходим к следующей строке
		if *separated && len(str) == 1 {
			continue
		}

		//создаем новый слайс строк, где будут храниться строки с нужными индексами
		newStr := []string{}
		//если пришел флаг -f, тогда выбираем указанные столбцы для вывода
		if *fields != "" {
			//слайс для хранения индекса нужных столбцов
			numCollumns := selectCollumns(*fields)
			//проходимся по полученному срезу нужных столбцов для вывода
			for _, v := range numCollumns {
				//если полученный индекс меньше наибольшего наибольшего индекса строки и не меньше 0, тогда добавляем элемент в newStr
				if v-1 < len(str) && v-1 >= 0 {
					//добавляем элемент в слайс
					newStr = append(newStr, str[v-1])
				}
			}
			//печатаем объединенный результат строки(по столбцам)
			fmt.Println(strings.Join(newStr, "\t"))
		}
		//если же не получали флаг -f, тогда просто выводим изначальные входные данные
		if *fields == "" {
			fmt.Println(strings.Join(str, "\t"))
		}
	}

}

func main() {
	//парсим флаги
	flag.Parse()
	//создаем слайс, где храниться входные строки
	lines := []string{}
	//создаем сканнер для чтения данных из буфера
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		//добавляем слайс в срез строк
		lines = append(lines, scanner.Text())
	}

	fmt.Println("Вывод:")
	//вызываем функцию, где данные будут группироваться в колонны и выводиться
	Collumns(lines)
}
