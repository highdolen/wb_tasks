package main

import (
	"fmt"
	"sync"
	"time"
)

// or принимает на вход каналы и возвращает результирующий канал(через него подается сигнал о заверщении работы)
func or(channels ...<-chan interface{}) <-chan interface{} {
	//создаем результирующий канал
	resultChannel := make(chan interface{})

	//запускаем горутину, которая ждет закрытия канал параллельно с выполнением main-горутины
	go func() {
		//создаем вэйтгруппу для параллельного считывания данных с канала
		var wg sync.WaitGroup
		//читаем данные с каналов, пока они не закрыты
		for _, ch := range channels {
			//инкрементируем счетчик горутин
			wg.Add(1)
			//запускаем горутину
			go func() {
				//сигнализируем о том, что горутина выполнила свою задачу
				defer wg.Done()
				select {
				//читаем значение из канала
				case _, ok := <-ch:
					//если не смогли прочитать данные, значит канал закрыт
					if !ok {
						//закрываем наш результирующий канал(сигнализируем о том, что нужно завершать программу)
						close(resultChannel)
					}
				}
			}()
		}
		//ждем пока все горутины завершат работу
		wg.Wait()
	}()

	return resultChannel
}

func main() {
	//инициализируем сигнал(который будет сигнализировать о том, что прошло время и нужно завершать работу) через функцию
	sig := func(after time.Duration) <-chan interface{} {
		//создаем канал для сигнала о завершении работы
		c := make(chan interface{})
		//горутина, которая закрывает канал по истечении времени
		go func() {
			defer close(c)
			time.Sleep(after)
		}()
		//возвращаем канал
		return c
	}

	//инициализируем переменную, которая хранит время в данный момент
	start := time.Now()
	//передаем если поступил сигнал из всех каналов о том, что нужно завершить программу, тогда завершаем ее
	<-or(
		sig(2*time.Hour),
		sig(5*time.Minute),
		sig(2*time.Second),
		sig(1*time.Hour),
		sig(1*time.Minute),
	)
	//фиксируем время работы программы с ее начала до завершения через канал
	fmt.Printf("done after %v", time.Since(start))
}
