package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	//создаем контекст с отменой для корректного завершения программы
	ctx, cancel := context.WithCancel(context.Background())
	//отложенный cancel(необязателен, делается на всякий случай)
	defer cancel()

	//создаем буферезированный канал, через который будет поступать сигнал для завершения работы программы
	sigChan := make(chan os.Signal, 1)
	//передаем в канал системный вызов(ctrl+c)
	signal.Notify(sigChan, syscall.SIGINT)

	//запускаем горутину, которая параллельно с выполнением программы
	//"ловит" сигнал и постепенно останавливает программу
	go func() {
		//поступает сигнал из канала
		<-sigChan
		fmt.Println("\nОстанавливаем программу.")
		//вызываем cancel, чтобы программа корректно завершилась через контекст
		cancel()
	}()

	//создаем небуферезированный канал
	ch := make(chan int)
	//создаем счетчик воркеров
	var countWorkers int
	fmt.Println("Введите количество воркеров:")
	fmt.Scan(&countWorkers)

	//запускаем горутины воркеров
	for i := 0; i < countWorkers; i++ {
		go worker(ctx, ch, i)
	}

	//запускаем бесконечный цикл чисел
	for i := 0; ; i++ {
		//если поступил сингнал о завершении работы, тогда закрываем канал
		//и завершаем наш цикл
		select {
		case <-ctx.Done():
			close(ch)
			return
		//пока сигнал не поступил, отправляем числа в канал
		case ch <- i:
			//программа "засыпает" на 1 сек, чтобы числа не отправлялись слишком часто
			time.Sleep(1 * time.Second)
		}
	}
}

// функция worker, на вход подается context, канал чтения и id воркера
func worker(ctx context.Context, jobs <-chan int, id int) {
	//запускаем бесконечный цикл чтения данных из канала
	for {
		select {
		//если поступил сигнал о завершении работу, говорим воркерам завершать ее
		case <-ctx.Done():
			fmt.Printf("Worker %v завершает работу\n", id)
			//завершаем работу
			return
		//если сигнал о завершении работы не поступил, читаем данные из канала
		//и обрабатываем
		case job, ok := <-jobs:
			//если не получилось прочитать данные из канала, тогда выходим из функции
			if !ok {
				return
			}
			//пишем, что воркер обработал число
			fmt.Printf("Worker %v - %v\n", id, job)
		}
	}
}
