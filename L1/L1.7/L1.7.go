package main

import (
	"fmt"
	"sync"
)

func main() {
	//инициализируем мапу
	m := make(map[int]int)
	//создаем канал
	ch := make(chan int)
	//создаем переменную, отвечающую за количество работающих воркеров
	numWorkers := 3
	//создаем мюьтекс, для безопасной записи в map
	mu := sync.Mutex{}
	//создаем вэйтгруппу, для конкурентной работы
	wg := &sync.WaitGroup{}
	//запускаем воркеров
	for i := 0; i < numWorkers; i++ {
		//увеличиваем счетчик для каждой задачи
		wg.Add(1)
		go worker(ch, i, &mu, wg, m)
	}
	//запускаем цикл для записи чисел в мапу
	for i := 7; i < 10; i++ {
		//передаем число в канал
		ch <- i
	}

	//закрываем канал(сообщаем, что задач больше не будет)
	close(ch)

	//ждем пока работа воркеров завершится
	wg.Wait()
	//печатаем мапу
	fmt.Println(m)
}

// воркер принимает канал чтения, свой айди, мьютекс, вэйтгруппу и мапу(передаем без указателя, так как ссылочный тип)
func worker(jobs <-chan int, id int, mu *sync.Mutex, wg *sync.WaitGroup, m map[int]int) {
	//читаем данные из канала
	for job := range jobs {
		//мьютимся, чтобы все аккуратно записалось(мапа не потокобезопасна)
		mu.Lock()
		//сообщаем о том, какой воркер записал число
		fmt.Printf("Worker %v - %v\n", id, job)
		//записываем число в мапу
		m[id] = job
		//снимаем лок
		mu.Unlock()
		//сообщаем вэйтгруппе о том, что задача выполнена
		wg.Done()
	}
}
