package main

import (
	"fmt"
	"sync"
)

// создаем структуру счетчика с полями: мюьтекс и переменная счетчика
type Counter struct {
	mu    sync.Mutex
	count int
}

func main() {
	//создаем указатель на вэйтгруппу для ожидания всех горутин
	wg := &sync.WaitGroup{}
	//инициализируем количество воркеров
	workerPool := 3

	//создаем указатель на структуру(счетчик, доступный для всех горутин)
	nums := &Counter{}

	//запускаем воркеров
	for i := 0; i < workerPool; i++ {
		//увеличиваем кол-во ожидаемых задач
		wg.Add(1)
		//запускаем горутину воркер
		go worker(nums, wg)
	}
	//ждем, пока все воркеры выполнят свою задачу, чтобы main не завершился раньше
	wg.Wait()
	//печатаем итоговое значение счетчика
	fmt.Println(nums.count)
}

// воркер принимает на вход структуру и вэйтгруппу
func worker(c *Counter, wg *sync.WaitGroup) {
	//отложенный вызов(уменьшаем счетчик вэйтгруппы на один)
	//сообщаем вэйтгруппе, что воркер выполнил свою задачу
	defer wg.Done()
	//мьютимся для безопасного доступа к счетчику
	c.mu.Lock()
	//увеличиваем счетчик на 1
	c.count++
	//снимаем лок
	c.mu.Unlock()
}
